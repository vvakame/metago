// Code generated by metago. DO NOT EDIT.

//+build !metago

// function with struct processing.

package simpleFunc

import (
	"fmt"
)

type Foo struct {
	ID   int64
	Name string
}

func example() {
	{
		obj := &Foo{}
		kvMap := make(map[string]interface{})

		{
			kvMap["ID"] = obj.ID
		}
		{
			kvMap["Name"] = obj.Name
		}
		fmt.Println(kvMap)
	}
	{
		obj := Foo{}
		kvMap := make(map[string]interface{})

		{
			kvMap["ID"] = obj.ID
		}
		{
			kvMap["Name"] = obj.Name
		}
		fmt.Println(kvMap)
	}
	{
		var obj *Foo
		kvMap := make(map[string]interface{})

		{
			kvMap["ID"] = obj.ID
		}
		{
			kvMap["Name"] = obj.Name
		}
		fmt.Println(kvMap)
	}
	{
		var obj Foo
		kvMap := make(map[string]interface{})

		{
			kvMap["ID"] = obj.ID
		}
		{
			kvMap["Name"] = obj.Name
		}
		fmt.Println(kvMap)
	}
	{
		obj := new(Foo)
		kvMap := make(map[string]interface{})

		{
			kvMap["ID"] = obj.ID
		}
		{
			kvMap["Name"] = obj.Name
		}
		fmt.Println(kvMap)
	}
}
