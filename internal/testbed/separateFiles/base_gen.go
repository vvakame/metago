// Code generated by metago. DO NOT EDIT.

//+build !metago

// use inline template with separate files.

package separateFiles

import (
	"bytes"
	"strconv"
	"strings"
	"time"
)

type Foo struct {
	ID        int64
	Name      string `json:"nickname"`
	CreatedAt time.Time
}

func (foo *Foo) MarshalJSON() ([]byte, error) {

	return func() ([]byte, error) {
		var buf bytes.Buffer
		buf.WriteString("{")

		var i int
		{

			if i != 0 {
				buf.WriteString(",")
			}

			propertyName := "ID"
			if v := ""; v != "" {
				propertyName = strings.SplitN(v, ",", 2)[0]
			}

			buf.WriteString(`"`)
			buf.WriteString(propertyName)
			buf.WriteString(`":`)
			{

				buf.Write([]byte(strconv.FormatInt(foo.ID, 10)))
			}

			i++
		}
		{

			if i != 0 {
				buf.WriteString(",")
			}

			propertyName := "Name"
			if v := "nickname"; v != "" {
				propertyName = strings.SplitN(v, ",", 2)[0]
			}

			buf.WriteString(`"`)
			buf.WriteString(propertyName)
			buf.WriteString(`":`)
			{

				buf.Write([]byte(strconv.Quote(foo.Name)))
			}

			i++
		}
		{
			if foo.CreatedAt.IsZero() {
				goto metagoGoto0

			}

			if i != 0 {
				buf.WriteString(",")
			}

			propertyName := "CreatedAt"
			if v := ""; v != "" {
				propertyName = strings.SplitN(v, ",", 2)[0]
			}

			buf.WriteString(`"`)
			buf.WriteString(propertyName)
			buf.WriteString(`":`)
			{

				b, err := foo.CreatedAt.MarshalJSON()
				if err != nil {
					return nil, err
				}
				buf.Write(b)
			}

			i++
		}
	metagoGoto0:
		;

		buf.WriteString("}")

		return buf.Bytes(), nil
	}()
}
